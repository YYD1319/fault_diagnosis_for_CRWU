# -*- coding: utf-8 -*-
"""wavelets_trans.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18wxEw81RiR1aM6TNqneIKkuRjE2OCokt
"""

import matplotlib.pyplot as plt
import numpy as np
import pywt
from utils import preprocess
import time

def cwt_trans_for_dataset(dataset_X, dataset_Y, save_path, t, scales, wave_name, sampling_period):
    list = [0] * 10
    time0 = time.time()
    for i in range(len(dataset_X)):
        data = dataset_X[i].squeeze()

        fig = cwt_trans(data, t, scales, wave_name, sampling_period)

        x = save_path + str(np.argmax(dataset_Y[i])) + r'/' + str(list[np.argmax(dataset_Y[i])]) + '.jpg'
        fig.savefig(x)
        list[np.argmax(dataset_Y[i])] += 1
        plt.close(fig)
        if i % 100 == 0 and i > 0:
            print('已保存{}张cwt图片---{}'.format(i, time.time() - time0))
            time0 = time.time()
    print('共保存{}张cwt图片'.format(len(dataset_X)))

def cwt_trans(data, t, scales, wave_name, sampling_period):
    [cwtmatr, frequencies] = pywt.cwt(data, scales, wave_name, sampling_period)

    # 输出频率计算
    # f = (fs / (n * totalscal)) * np.arange(totalscal, 1, -1)
    #  = scale2frequency(wavelet, scale)/sampling_period

    # 归一化
    # norm_cwtmatr = cwtmatr / np.sqrt(2*np.pi*frequencies.reshape(-1,1))

    plt.contourf(t, frequencies, abs(cwtmatr))
    plt.axis('off')
    plt.gcf().set_size_inches(864 / 100, 864 / 100)
    # 将当前图形的 X Y轴主刻度设置为空
    plt.gca().xaxis.set_major_locator(plt.NullLocator())
    plt.gca().yaxis.set_major_locator(plt.NullLocator())
    # 设置图片和画布、图片和图片的间距
    plt.subplots_adjust(top=1, bottom=0, right=1, left=0, hspace=0, wspace=0)
    # 设置或者获取轴域的边界距离（轴两端和画布顶点的距离）
    plt.margins(0, 0)
    return plt.gcf()


if __name__ == "__main__":
    path = r'../datasets/12K_DE_data/0HP'
    train_X, train_Y, valid_X, valid_Y, test_X, test_Y = preprocess.prepro(d_path=path,
                                                                           length=864,
                                                                           number=1000,
                                                                           normal=True,
                                                                           rate=[0.5, 0.25, 0.25],
                                                                           enc=False,
                                                                           enc_step=28)

    # train_X, valid_X, test_X = \
    #     train_X[:, np.newaxis, :], valid_X[:, np.newaxis, :], test_X[:, np.newaxis, :]
    # 添加维度 (7000, 864) -> (7000, 1, 864) [batchsize, input_size, max_length] [批量大小N， 序列长度L, 特征长度Hin]

    N = 864  # 和样本采样长度相同(length=784)
    fs = 12000  # 采样频率，和实际的采样频率相同
    t = np.linspace(0, N / fs, N, endpoint=False)
    wave_name = 'cmor3-3'
    total_scal = 256
    fc = pywt.central_frequency(wave_name)
    cparam = 2 * fc * total_scal  # 常数(n)影响图像分布区域
    scales = cparam / np.arange(total_scal, 1, -1)
    sampling_period = 1.0 / fs

    path_train = r'../cwt_picture/0HP/cmor3-3/train/'
    path_valid = r'../cwt_picture/0HP/cmor3-3/valid/'
    path_test = r'../cwt_picture/0HP/cmor3-3/test/'

    cwt_trans_for_dataset(train_X, train_Y, path_train, t, scales, wave_name, sampling_period)
    cwt_trans_for_dataset(valid_X, valid_Y, path_valid, t, scales, wave_name, sampling_period)
    cwt_trans_for_dataset(test_X, test_Y, path_test, t, scales, wave_name, sampling_period)
